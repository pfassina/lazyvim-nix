# Configuration generation utilities for LazyVim Nix module
{ lib }:

{
  # Generate extras import statements
  extrasImportSpecs = enabledExtras:
    map (extra: ''{ import = "${extra.import}" },'') enabledExtras;

  # Generate extras config override files for extras with custom config
  extrasConfigFiles = enabledExtras:
    let
      extrasWithConfig = lib.filter (extra: extra.hasConfig) enabledExtras;
    in
      lib.listToAttrs (map (extra:
        lib.nameValuePair
          "nvim/lua/plugins/extras-${extra.category}-${extra.name}.lua"
          {
            text = ''
              -- Extra configuration override for ${extra.category}/${extra.name} (configured via Nix)
              -- This file overrides the default configuration from the LazyVim extra
              ${extra.config}
            '';
          }
      ) extrasWithConfig);

  # Generate lazy.nvim configuration
  lazyConfig = devPath: extrasImportSpecs: availableDevSpecs: treesitterLangList:
    ''
      -- LazyVim Nix Configuration
      -- This file is auto-generated by the lazyvim-nix flake

      local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
      if not vim.loop.fs_stat(lazypath) then
        vim.fn.system({
          "git",
          "clone",
          "--filter=blob:none",
          "https://github.com/folke/lazy.nvim.git",
          "--branch=stable",
          lazypath,
        })
      end
      vim.opt.rtp:prepend(lazypath)

      -- Configure lazy.nvim to use pre-fetched plugins
      require("lazy").setup({
        defaults = { lazy = true },
        checker = { enabled = false },  -- Disable update checker since Nix manages versions
        change_detection = { notify = false },  -- Disable config change notifications
        dev = {
          path = "${devPath}",
          patterns = {},  -- Don't automatically match, use explicit dev = true
          fallback = false,
        },
        spec = {
          { "LazyVim/LazyVim", import = "lazyvim.plugins", dev = true, pin = true },
          -- LazyVim extras
          ${lib.concatStringsSep "\n        " extrasImportSpecs}
          -- Disable Mason.nvim in Nix environment
          { "mason-org/mason.nvim", enabled = false },
          { "mason-org/mason-lspconfig.nvim", enabled = false },
          { "jay-babu/mason-nvim-dap.nvim", enabled = false },
          -- Configure treesitter to work with Nix-managed parsers
          {
            "nvim-treesitter/nvim-treesitter",
            -- Parser compilation is skipped when using Nix
            build = false,
            opts = function(_, opts)
              opts.auto_install = false
              opts.ensure_installed = {}
              return opts
            end,
            config = function(_, opts)

              local TS = require("nvim-treesitter")
              local LazyVimUtil = require("lazyvim.util")

              -- Mock TS.get_installed to bypass the installation checks
              -- See nvim-treesitter/lua/nvim-treesitter/config.lua#L42-L58
              local _ts_install = TS.get_installed
              TS.get_installed = function()
                return {}
              end

              -- Mock LazyVimUtil.treesitter.get_installed() to populate M._installed
              -- from the buildtime parser list. This ensures M._installed is
              -- populated correctly for autocmd functionality
              -- See LazyVim/lua/lazyvim/util/treesitter.lua#L7-L17
              local _lazyvim_install = LazyVimUtil.treesitter.get_installed

              -- Nix-managed parser list (extracted from treesitterParsers option)
              local nix_parsers = { ${treesitterLangList} }

              LazyVimUtil.treesitter.get_installed = function(update)
                if update then
                  LazyVimUtil.treesitter._installed = {}
                  LazyVimUtil.treesitter._queries = {}
                  for _, lang in ipairs(nix_parsers) do
                    LazyVimUtil.treesitter._installed[lang] = true
                  end
                end
                return LazyVimUtil.treesitter._installed or {}
              end

              -- Find and call LazyVim's default config
              -- This will:
              -- 1. Pass the version check (TS.get_installed returns empty)
              -- 2. Setup treesitter with our opts
              -- 3. Skip parser installation (ensure_installed is empty)
              -- 4. Populate M._installed with Nix parsers (our LazyVim mock)
              -- 5. Create autocmds for highlighting, indents, folds
              local treesitter_plugins = require("lazyvim.plugins.treesitter")
              local config_fn = nil

              -- Search for first nvim-treesitter plugin spec by identifier
              for _, spec in ipairs(treesitter_plugins) do
                if spec[1] == "nvim-treesitter/nvim-treesitter" and
                   type(spec.config) == "function" then
                  config_fn = spec.config
                  break
                end
              end

              if not config_fn then
                error("Failed to find nvim-treesitter config in lazyvim.plugins.treesitter")
              else
                config_fn(_, opts)
              end

              -- Restore pre-mock references
              LazyVimUtil.treesitter.get_installed = _lazyvim_install
              if _ts_install then
                TS.get_installed = _ts_install
              else
                TS.get_installed = nil
              end
            end,
            dev = true,
            pin = true,
          },
          -- Mark available plugins as dev = true
          ${lib.concatStringsSep "\n        " availableDevSpecs}
          -- User plugins
          { import = "plugins" },
        },
        performance = {
          rtp = {
            disabled_plugins = {
              "gzip",
              "matchit",
              "matchparen",
              "netrwPlugin",
              "tarPlugin",
              "tohtml",
              "tutor",
              "zipPlugin",
            },
          },
        },
      })

    '';
}