# Configuration generation utilities for LazyVim Nix module
{ lib }:

{
  # Generate extras import statements
  extrasImportSpecs = enabledExtras:
    map (extra: ''{ import = "${extra.import}" },'') enabledExtras;

  # Generate extras config override files for extras with custom config
  extrasConfigFiles = enabledExtras:
    let
      extrasWithConfig = lib.filter (extra: extra.hasConfig) enabledExtras;
    in
      lib.listToAttrs (map (extra:
        lib.nameValuePair
          "nvim/lua/plugins/extras-${extra.category}-${extra.name}.lua"
          {
            text = ''
              -- Extra configuration override for ${extra.category}/${extra.name} (configured via Nix)
              -- This file overrides the default configuration from the LazyVim extra
              ${extra.config}
            '';
          }
      ) extrasWithConfig);

  # Generate lazy.nvim configuration
  lazyConfig = devPath: extrasImportSpecs: availableDevSpecs:
    ''
      -- LazyVim Nix Configuration
      -- This file is auto-generated by the lazyvim-nix flake

      local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
      if not vim.loop.fs_stat(lazypath) then
        vim.fn.system({
          "git",
          "clone",
          "--filter=blob:none",
          "https://github.com/folke/lazy.nvim.git",
          "--branch=stable",
          lazypath,
        })
      end
      vim.opt.rtp:prepend(lazypath)

      -- Configure lazy.nvim to use pre-fetched plugins
      require("lazy").setup({
        defaults = { lazy = true },
        checker = { enabled = false },  -- Disable update checker since Nix manages versions
        change_detection = { notify = false },  -- Disable config change notifications
        dev = {
          path = "${devPath}",
          patterns = {},  -- Don't automatically match, use explicit dev = true
          fallback = false,
        },
        spec = {
          { "LazyVim/LazyVim", import = "lazyvim.plugins", dev = true, pin = true },
          -- LazyVim extras
          ${lib.concatStringsSep "\n        " extrasImportSpecs}
          -- Disable Mason.nvim in Nix environment
          { "mason-org/mason.nvim", enabled = false },
          { "mason-org/mason-lspconfig.nvim", enabled = false },
          { "jay-babu/mason-nvim-dap.nvim", enabled = false },
          -- Configure treesitter to work with Nix-managed parsers
          {
            "nvim-treesitter/nvim-treesitter",
            event = { "BufReadPost", "BufNewFile", "BufWritePre", "VeryLazy" },
            cmd = { "TSUpdate", "TSInstall", "TSLog", "TSUninstall" },
            -- Parser compilation is skipped when using Nix
            build = false,
            opts = {
              auto_install = false,
              ensure_installed = {},
              highlight = { enable = true },
              indent = { enable = true },
              incremental_selection = {
                enable = true,
                keymaps = {
                  init_selection = "<C-space>",
                  node_incremental = "<C-space>",
                  scope_incremental = false,
                  node_decremental = "<bs>",
                },
              },
            },
            dev = true,
            pin = true,
          },
          -- Mark available plugins as dev = true
          ${lib.concatStringsSep "\n        " availableDevSpecs}
          -- User plugins
          { import = "plugins" },
        },
        performance = {
          rtp = {
            disabled_plugins = {
              "gzip",
              "matchit",
              "matchparen",
              "netrwPlugin",
              "tarPlugin",
              "tohtml",
              "tutor",
              "zipPlugin",
            },
          },
        },
      })

    '';
}
