name: Update Plugin Mappings

on:
  workflow_dispatch:
    inputs:
      verify:
        description: 'Verify packages exist in nixpkgs'
        required: false
        default: true
        type: boolean
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  update-mappings:
    # Only run on workflow_dispatch or when a maintainer comments "/update-mappings"
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event.issue.pull_request && 
       contains(github.event.comment.body, '/update-mappings') && 
       (github.event.comment.author_association == 'OWNER' || 
        github.event.comment.author_association == 'MEMBER' || 
        github.event.comment.author_association == 'COLLABORATOR'))
    
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v26
        
      - name: Setup Nix cache
        uses: cachix/cachix-action@v12
        with:
          name: nix-community
          
      - name: Update plugin mappings
        id: update-mappings
        run: |
          # Run plugin extraction with verification
          if [ "${{ inputs.verify || true }}" = "true" ]; then
            nix develop --command ./scripts/update-plugins.sh --verify
          else
            nix develop --command ./scripts/update-plugins.sh
          fi
          
          # Check mapping status
          UNMAPPED_COUNT=$(jq '.extraction_report.unmapped_plugins // 0' plugins.json)
          TOTAL_COUNT=$(jq '.extraction_report.total_plugins // 0' plugins.json)
          MAPPED_COUNT=$(jq '.extraction_report.mapped_plugins // 0' plugins.json)
          
          echo "total_count=$TOTAL_COUNT" >> $GITHUB_OUTPUT
          echo "mapped_count=$MAPPED_COUNT" >> $GITHUB_OUTPUT
          echo "unmapped_count=$UNMAPPED_COUNT" >> $GITHUB_OUTPUT
          
          # Check if we have verified mappings to add
          if [ -f mapping-analysis-report.md ] && grep -q "## ‚úÖ Verified Mappings" mapping-analysis-report.md; then
            echo "has_verified_mappings=true" >> $GITHUB_OUTPUT
            
            # Extract the nix code block with mappings
            sed -n '/```nix/,/```/p' mapping-analysis-report.md | sed '1d;$d' > new-mappings.nix
            
            # Count new mappings
            NEW_MAPPING_COUNT=$(grep -c '=' new-mappings.nix || echo 0)
            echo "new_mapping_count=$NEW_MAPPING_COUNT" >> $GITHUB_OUTPUT
            
            # Apply the mappings to plugin-mappings.nix
            if [ -s new-mappings.nix ]; then
              # Insert before the closing brace
              sed -i '$ s/}//' plugin-mappings.nix
              cat new-mappings.nix >> plugin-mappings.nix
              echo "}" >> plugin-mappings.nix
              
              # Re-run extraction with new mappings for clean output
              nix develop --command ./scripts/update-plugins.sh
              
              # Update counts after re-run
              FINAL_MAPPED=$(jq '.extraction_report.mapped_plugins // 0' plugins.json)
              FINAL_UNMAPPED=$(jq '.extraction_report.unmapped_plugins // 0' plugins.json)
              echo "final_mapped_count=$FINAL_MAPPED" >> $GITHUB_OUTPUT
              echo "final_unmapped_count=$FINAL_UNMAPPED" >> $GITHUB_OUTPUT
            fi
          else
            echo "has_verified_mappings=false" >> $GITHUB_OUTPUT
            echo "new_mapping_count=0" >> $GITHUB_OUTPUT
          fi
          
      - name: Create Pull Request
        if: steps.update-mappings.outputs.has_verified_mappings == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: add ${{ steps.update-mappings.outputs.new_mapping_count }} new plugin mappings"
          title: "Add ${{ steps.update-mappings.outputs.new_mapping_count }} verified plugin mappings"
          body: |
            This PR adds newly verified plugin mappings to nixpkgs.
            
            ## Mapping Update Summary
            
            - **New mappings added**: ${{ steps.update-mappings.outputs.new_mapping_count }}
            - **Total plugins**: ${{ steps.update-mappings.outputs.total_count }}
            - **Mapped before**: ${{ steps.update-mappings.outputs.mapped_count }} / ${{ steps.update-mappings.outputs.total_count }}
            - **Mapped after**: ${{ steps.update-mappings.outputs.final_mapped_count }} / ${{ steps.update-mappings.outputs.total_count }}
            - **Remaining unmapped**: ${{ steps.update-mappings.outputs.final_unmapped_count }}
            
            ## Changes
            - ‚úÖ Added verified mappings to `plugin-mappings.nix`
            - üìÑ Updated `plugins.json` with clean extraction
            ${{ steps.update-mappings.outputs.final_unmapped_count > 0 && '- ‚ö†Ô∏è Some plugins still need manual mapping review' || '- üéâ All plugins are now mapped!' }}
            
            ## Verification
            All added mappings were verified to exist in `nixpkgs.vimPlugins`.
            
            ---
            *This pull request was automatically generated by the mapping update workflow.*
          branch: update-plugin-mappings
          delete-branch: true
          add-paths: |
            plugins.json
            plugin-mappings.nix
            
      - name: Comment on issue/PR
        if: github.event_name == 'issue_comment' && steps.update-mappings.outputs.has_verified_mappings == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚úÖ Created PR #${{ steps.create-pr.outputs.pull-request-number }} with ${{ steps.update-mappings.outputs.new_mapping_count }} new plugin mappings!`
            })
            
      - name: Comment on issue/PR (no mappings)
        if: github.event_name == 'issue_comment' && steps.update-mappings.outputs.has_verified_mappings != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const unmapped = ${{ steps.update-mappings.outputs.unmapped_count }};
            let message = '';
            
            if (unmapped === 0) {
              message = '‚úÖ All plugins are already mapped! No updates needed.';
            } else {
              message = `‚ö†Ô∏è Found ${unmapped} unmapped plugins, but no verified mappings available. Check the mapping-analysis-report.md for manual review.`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            })