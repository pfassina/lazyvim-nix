name: Update LazyVim Plugins

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'scripts/update-plugins.sh'
      - 'scripts/extract-plugins.lua'
      - 'scripts/suggest-mappings.lua'
      - 'scripts/generate-extras-metadata.sh'
      - 'scripts/extract-extras-plugins.lua'
      - '.github/workflows/update-plugins.yml'

permissions:
  contents: write
  pull-requests: write

jobs:
  update-plugins:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v26
        with:
          nix_version: 2.20.5
        
      - name: Setup Nix cache
        uses: cachix/cachix-action@v12
        with:
          name: nix-community
          skipPush: true
          
      - name: Check for LazyVim updates
        id: check-updates
        run: |
          # Get current version from plugins.json
          if [ -f plugins.json ]; then
            CURRENT_VERSION=$(jq -r '.version' plugins.json)
            CURRENT_COMMIT=$(jq -r '.commit' plugins.json)
          else
            CURRENT_VERSION="none"
            CURRENT_COMMIT="none"
          fi

          # Get latest LazyVim version using git ls-remote (same as update script)
          LATEST_VERSION=$(git ls-remote --tags https://github.com/LazyVim/LazyVim 2>/dev/null | \
            sed 's/.*refs\/tags\///' | \
            grep -E '^v[0-9]+\.[0-9]+' | \
            sort -rV | \
            head -1)
          LATEST_COMMIT=$(git ls-remote https://github.com/LazyVim/LazyVim.git HEAD | cut -f1)

          if [ -z "$LATEST_VERSION" ]; then
            echo "Error: Failed to determine latest LazyVim release version"
            exit 1
          fi

          echo "Current version: $CURRENT_VERSION ($CURRENT_COMMIT)"
          echo "Latest version: $LATEST_VERSION ($LATEST_COMMIT)"

          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          else
            echo "update_needed=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Update plugins and extras
        if: steps.check-updates.outputs.update_needed == 'true'
        id: update-plugins
        run: |
          # Update core plugins with verification enabled
          nix develop --command ./scripts/update-plugins.sh --verify

          # Update extras metadata
          ./scripts/generate-extras-metadata.sh
          
          # Check if there are unmapped plugins
          UNMAPPED_COUNT=$(jq '.extraction_report.unmapped_plugins // 0' plugins.json)
          echo "unmapped_count=$UNMAPPED_COUNT" >> $GITHUB_OUTPUT
          
          # Extract plugin statistics for PR body
          TOTAL_PLUGINS=$(jq '.extraction_report.total_plugins // 0' plugins.json)
          MAPPED_PLUGINS=$(jq '.extraction_report.mapped_plugins // 0' plugins.json)
          MULTI_MODULE_PLUGINS=$(jq '.extraction_report.multi_module_plugins // 0' plugins.json)
          
          echo "total_plugins=$TOTAL_PLUGINS" >> $GITHUB_OUTPUT
          echo "mapped_plugins=$MAPPED_PLUGINS" >> $GITHUB_OUTPUT
          echo "multi_module_plugins=$MULTI_MODULE_PLUGINS" >> $GITHUB_OUTPUT
          
          # If unmapped plugins exist, extract mapping suggestions
          if [ "$UNMAPPED_COUNT" -gt 0 ] && [ -f mapping-analysis-report.md ]; then
            # Extract verified mappings from the report
            if grep -q "## ✅ Verified Mappings" mapping-analysis-report.md; then
              echo "has_verified_mappings=true" >> $GITHUB_OUTPUT
              
              # Extract the nix code block with mappings
              sed -n '/```nix/,/```/p' mapping-analysis-report.md | sed '1d;$d' > new-mappings.nix
              
              # Apply the mappings to plugin-mappings.nix
              if [ -s new-mappings.nix ]; then
                # Insert before the closing brace
                sed -i '$ s/}//' plugin-mappings.nix
                cat new-mappings.nix >> plugin-mappings.nix
                echo "}" >> plugin-mappings.nix
                
                # Re-run extraction with new mappings
                nix develop --command ./scripts/update-plugins.sh
              fi
            else
              echo "has_verified_mappings=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Stage the mapping analysis report if it exists
          if [ -f mapping-analysis-report.md ]; then
            git add mapping-analysis-report.md
          fi
          
      - name: Create Pull Request
        if: steps.check-updates.outputs.update_needed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update LazyVim plugins to ${{ steps.check-updates.outputs.latest_version }}"
          title: "Update LazyVim plugins to ${{ steps.check-updates.outputs.latest_version }}"
          body: |
            This PR updates the LazyVim plugin specifications and extras metadata to the latest version.

            ## Changes
            - Updated `plugins.json` with latest LazyVim plugin list
            - Updated `extras.nix` with latest LazyVim extras metadata
            - Version: ${{ steps.check-updates.outputs.latest_version }}
            ${{ steps.update-plugins.outputs.has_verified_mappings == 'true' && '- Added new verified plugin mappings to `plugin-mappings.nix`' || '' }}
            ${{ steps.update-plugins.outputs.unmapped_count > 0 && steps.update-plugins.outputs.has_verified_mappings != 'true' && '- ⚠️ Found unmapped plugins that need manual review (see mapping-analysis-report.md)' || '' }}
            
            ## Plugin Statistics
            - Total plugins: ${{ steps.update-plugins.outputs.total_plugins || 'N/A' }}
            - Mapped plugins: ${{ steps.update-plugins.outputs.mapped_plugins || 'N/A' }}
            - Unmapped plugins: ${{ steps.update-plugins.outputs.unmapped_count || 0 }}
            - Multi-module plugins: ${{ steps.update-plugins.outputs.multi_module_plugins || 'N/A' }}
            
            ## Checklist
            - [ ] Review plugin changes
            - [ ] Test with example configuration
            ${{ steps.update-plugins.outputs.unmapped_count > 0 && '- [ ] Review mapping-analysis-report.md for unmapped plugins' || '- [x] All plugins are mapped' }}
            
            ---
            *This pull request was automatically generated by the update workflow.*
          branch: update-lazyvim-plugins
          delete-branch: true
          add-paths: |
            plugins.json
            plugin-mappings.nix
            extras.nix
          
  test-flake:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        nixpkgs:
          - nixos-unstable
          - nixos-23.11
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install Nix
        uses: nixbuild/nix-quick-install-action@v26
        with:
          nix_version: 2.20.5
        
      - name: Test flake
        run: |
          # Check flake
          nix flake check
          
          # Build the update script
          nix build .#default
          
          # Test the home-manager module evaluation
          nix eval .#homeManagerModules.default --apply 'module: if (builtins.typeOf module) == "path" then "Module loads successfully" else "Failed to load module"'